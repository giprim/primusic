{"ast":null,"code":"var _jsxFileName = \"/home/gi/NODEWORKSPACE/REACT/primusic/src/components/searchbar.tsx\";\nimport React, { useState } from 'react';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { Input } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport searchFor from '../redux/actions/searchFor';\n\nconst Searchbar = () => {\n  const searchResult = useSelector(state => state);\n  const dispatch = useDispatch();\n  const [query, setQuery] = useState('');\n\n  const handlerSearch = event => {\n    event.preventDefault();\n    dispatch(searchFor(query));\n  };\n\n  const searchInputEvent = event => {\n    const Form = document.forms;\n    const searchform = Form[0].name === 'searchForm' ? Form[0] : null; // if (event.keyCode === 13 && query !== '') searchform?.submit();\n  };\n\n  return React.createElement(\"div\", {\n    className: \"gi_width_res\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handlerSearch,\n    name: \"searchForm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(Input, {\n    size: \"large\",\n    prefix: React.createElement(SearchOutlined, {\n      className: \"searchIcon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }),\n    placeholder: \"Search...\",\n    className: \"searchBar\",\n    type: \"Search\",\n    onKeyUp: searchInputEvent,\n    onChange: e => setQuery(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"button\",\n    value: \"search\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  })));\n};\n\nexport default Searchbar;","map":{"version":3,"sources":["/home/gi/NODEWORKSPACE/REACT/primusic/src/components/searchbar.tsx"],"names":["React","useState","SearchOutlined","Input","useSelector","useDispatch","searchFor","Searchbar","searchResult","state","dispatch","query","setQuery","handlerSearch","event","preventDefault","searchInputEvent","Form","document","forms","searchform","name","e","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,KAAT,QAAsB,MAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,SAAP,MAAsB,4BAAtB;;AAEA,MAAMC,SAAmB,GAAG,MAAM;AACjC,QAAMC,YAAY,GAAGJ,WAAW,CAAEK,KAAD,IAAWA,KAAZ,CAAhC;AACA,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AAEA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMY,aAAa,GAAIC,KAAD,IAA6C;AAClEA,IAAAA,KAAK,CAACC,cAAN;AACAL,IAAAA,QAAQ,CAACJ,SAAS,CAACK,KAAD,CAAV,CAAR;AACA,GAHD;;AAKA,QAAMK,gBAAgB,GAAIF,KAAD,IAAkD;AAC1E,UAAMG,IAAuC,GAAGC,QAAQ,CAACC,KAAzD;AACA,UAAMC,UAAU,GAAGH,IAAI,CAAC,CAAD,CAAJ,CAAQI,IAAR,KAAiB,YAAjB,GAAgCJ,IAAI,CAAC,CAAD,CAApC,GAA0C,IAA7D,CAF0E,CAG1E;AACA,GAJD;;AAMA,SACC;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAM,IAAA,QAAQ,EAAEJ,aAAhB;AAA+B,IAAA,IAAI,EAAC,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,KAAD;AACC,IAAA,IAAI,EAAC,OADN;AAEC,IAAA,MAAM,EAAE,oBAAC,cAAD;AAAgB,MAAA,SAAS,EAAC,YAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFT;AAGC,IAAA,WAAW,EAAC,WAHb;AAIC,IAAA,SAAS,EAAC,WAJX;AAKC,IAAA,IAAI,EAAC,QALN;AAMC,IAAA,OAAO,EAAEG,gBANV;AAOC,IAAA,QAAQ,EAAGM,CAAD,IAAOV,QAAQ,CAACU,CAAC,CAACC,MAAF,CAASC,KAAV,CAP1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,EAUC;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,KAAK,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVD,CADD,CADD;AAgBA,CAjCD;;AAmCA,eAAejB,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { Input } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport searchFor from '../redux/actions/searchFor';\n\nconst Searchbar: React.FC = () => {\n\tconst searchResult = useSelector((state) => state);\n\tconst dispatch = useDispatch();\n\n\tconst [query, setQuery] = useState('');\n\n\tconst handlerSearch = (event: React.FormEvent<HTMLFormElement>) => {\n\t\tevent.preventDefault();\n\t\tdispatch(searchFor(query));\n\t};\n\n\tconst searchInputEvent = (event: React.KeyboardEvent<HTMLInputElement>) => {\n\t\tconst Form: HTMLCollectionOf<HTMLFormElement> = document.forms;\n\t\tconst searchform = Form[0].name === 'searchForm' ? Form[0] : null;\n\t\t// if (event.keyCode === 13 && query !== '') searchform?.submit();\n\t};\n\n\treturn (\n\t\t<div className='gi_width_res'>\n\t\t\t<form onSubmit={handlerSearch} name='searchForm'>\n\t\t\t\t<Input\n\t\t\t\t\tsize='large'\n\t\t\t\t\tprefix={<SearchOutlined className='searchIcon' />}\n\t\t\t\t\tplaceholder='Search...'\n\t\t\t\t\tclassName='searchBar'\n\t\t\t\t\ttype='Search'\n\t\t\t\t\tonKeyUp={searchInputEvent}\n\t\t\t\t\tonChange={(e) => setQuery(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t<input type='button' value='search' />\n\t\t\t</form>\n\t\t</div>\n\t);\n};\n\nexport default Searchbar;\n"]},"metadata":{},"sourceType":"module"}