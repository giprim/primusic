{"ast":null,"code":"var _jsxFileName = \"/home/gi/NODEWORKSPACE/REACT/primusic/src/components/searchbar/searchbar.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport searchFor from '../../redux/actions/searchFor';\nimport Search from 'antd/lib/input/Search';\nimport { useHistory } from 'react-router-dom';\nimport { LOADING } from '../../redux/types';\n\nconst Searchbar = ({\n  css\n}) => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const stateQuery = useSelector(state => state.search);\n  const [searchValue, setSearchValue] = useState();\n  useEffect(() => {\n    setSearchValue(stateQuery.query);\n  }, []);\n  console.log(stateQuery);\n\n  const handlerSearch = (text, event) => {\n    event === null || event === void 0 ? void 0 : event.preventDefault();\n\n    if (text !== '') {\n      dispatch({\n        type: LOADING\n      });\n      dispatch(searchFor(text));\n    }\n\n    history.push('/result');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"gi_width_res\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    style: css,\n    allowClear: true,\n    value: searchValue || stateQuery,\n    onChange: e => //@ts-ignore\n    setSearchValue(e.target.value),\n    placeholder: \"Search for track, artist, album...\",\n    className: \"searchBar\",\n    onSearch: handlerSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 4\n    }\n  }));\n};\n\nexport default Searchbar;","map":{"version":3,"sources":["/home/gi/NODEWORKSPACE/REACT/primusic/src/components/searchbar/searchbar.tsx"],"names":["React","useEffect","useState","useDispatch","useSelector","searchFor","Search","useHistory","LOADING","Searchbar","css","history","dispatch","stateQuery","state","search","searchValue","setSearchValue","query","console","log","handlerSearch","text","event","preventDefault","type","push","e","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,mBAAxB;;AAMA,MAAMC,SAA6B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAa;AAClD,QAAMC,OAAO,GAAGJ,UAAU,EAA1B;AACA,QAAMK,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,UAAU,GAAGT,WAAW,CAAEU,KAAD,IAAgBA,KAAK,CAACC,MAAvB,CAA9B;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,EAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACfgB,IAAAA,cAAc,CAACJ,UAAU,CAACK,KAAZ,CAAd;AACA,GAFQ,EAEN,EAFM,CAAT;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,UAAZ;;AAEA,QAAMQ,aAAa,GAAG,CACrBC,IADqB,EAErBC,KAFqB,KAOjB;AACJA,IAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,cAAP;;AAEA,QAAIF,IAAI,KAAK,EAAb,EAAiB;AAChBV,MAAAA,QAAQ,CAAC;AAAEa,QAAAA,IAAI,EAAEjB;AAAR,OAAD,CAAR;AACAI,MAAAA,QAAQ,CAACP,SAAS,CAACiB,IAAD,CAAV,CAAR;AACA;;AACDX,IAAAA,OAAO,CAACe,IAAR,CAAa,SAAb;AACA,GAfD;;AAiBA,sBACC;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,MAAD;AACC,IAAA,KAAK,EAAEhB,GADR;AAEC,IAAA,UAAU,MAFX;AAGC,IAAA,KAAK,EAAEM,WAAW,IAAIH,UAHvB;AAIC,IAAA,QAAQ,EAAGc,CAAD,IACT;AACAV,IAAAA,cAAc,CAACU,CAAC,CAACC,MAAF,CAASC,KAAV,CANhB;AAQC,IAAA,WAAW,EAAC,oCARb;AASC,IAAA,SAAS,EAAC,WATX;AAUC,IAAA,QAAQ,EAAER,aAVX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADD;AAgBA,CA7CD;;AA+CA,eAAeZ,SAAf","sourcesContent":["import React, { CSSProperties, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport searchFor from '../../redux/actions/searchFor';\nimport Search from 'antd/lib/input/Search';\nimport { useHistory } from 'react-router-dom';\nimport { LOADING } from '../../redux/types';\n\ninterface cssStyle {\n\tcss?: CSSProperties;\n}\n\nconst Searchbar: React.FC<cssStyle> = ({ css }) => {\n\tconst history = useHistory();\n\tconst dispatch = useDispatch();\n\tconst stateQuery = useSelector((state: any) => state.search);\n\tconst [searchValue, setSearchValue] = useState();\n\n\tuseEffect(() => {\n\t\tsetSearchValue(stateQuery.query);\n\t}, []);\n\n\tconsole.log(stateQuery);\n\n\tconst handlerSearch = (\n\t\ttext: string,\n\t\tevent?:\n\t\t\t| React.ChangeEvent<HTMLInputElement>\n\t\t\t| React.MouseEvent<HTMLElement, MouseEvent>\n\t\t\t| React.KeyboardEvent<HTMLInputElement>\n\t\t\t| undefined\n\t) => {\n\t\tevent?.preventDefault();\n\n\t\tif (text !== '') {\n\t\t\tdispatch({ type: LOADING });\n\t\t\tdispatch(searchFor(text));\n\t\t}\n\t\thistory.push('/result');\n\t};\n\n\treturn (\n\t\t<div className='gi_width_res'>\n\t\t\t<Search\n\t\t\t\tstyle={css}\n\t\t\t\tallowClear\n\t\t\t\tvalue={searchValue || stateQuery}\n\t\t\t\tonChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n\t\t\t\t\t//@ts-ignore\n\t\t\t\t\tsetSearchValue(e.target.value)\n\t\t\t\t}\n\t\t\t\tplaceholder='Search for track, artist, album...'\n\t\t\t\tclassName='searchBar'\n\t\t\t\tonSearch={handlerSearch}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default Searchbar;\n"]},"metadata":{},"sourceType":"module"}